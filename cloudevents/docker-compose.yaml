version: '2.1'
services:
  zookeeper:
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    networks:
     - my-network
  kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
     - my-network
  postgres:
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5432:5432
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
    networks:
     - my-network
  connect:
    image: quay.io/debezium/connect:${DEBEZIUM_VERSION}
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka
     - postgres
     - schema-registry
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
     - KAFKA_DEBUG=true
     - DEBUG_SUSPEND_FLAG=n
     - ENABLE_APICURIO_CONVERTERS=true
    networks:
     - my-network
  schema-registry:
    image: apicurio/apicurio-registry-mem:2.3.1.Final
    ports:
     - 8080:8080
    networks:
      - my-network
  avro-extractor:
    image: debezium-examples/cloudevents-avro-extractor:${DEBEZIUM_VERSION}
    build:
      context: avro-data-extractor
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - 8079:8079
    links:
      - kafka
    environment:
      - PORT=8079
      - QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - my-network
networks:
  my-network:
    name: cloudevents-network
