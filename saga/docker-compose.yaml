version: '2.1'
services:
  jaeger:
    image: jaegertracing/all-in-one:1
    ports:
     - 6831:6831/udp
     - 16686:16686
    networks:
     - my-network
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    networks:
     - my-network
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
    # Set to host IP address when working on the services locally
    # - ADVERTISED_HOST_NAME=172.17.0.1
    networks:
     - my-network
  connect:
    image: debezium/strimzi-connect
    build:
      context: debezium-strimzi
    ports:
     - 8083:8083
    links:
     - kafka
     - order-db
    environment:
     - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
     - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
     - |
         KAFKA_CONNECT_CONFIGURATION=
         key.converter=org.apache.kafka.connect.json.JsonConverter
         value.converter=org.apache.kafka.connect.json.JsonConverter
         key.converter.schemas.enable=false
         value.converter.schemas.enable=false
         group.id=connect
         offset.storage.topic=connect-offsets
         offset.storage.replication.factor=1
         config.storage.topic=connect-configs
         config.storage.replication.factor=1
         status.storage.topic=connect-status
         status.storage.replication.factor=1
         consumer.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor
         producer.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor
     - JAEGER_SERVICE_NAME=kafka-connect
     - JAEGER_AGENT_HOST=jaeger
     - JAEGER_SAMPLER_TYPE=const
     - JAEGER_SAMPLER_PARAM=1
     - STRIMZI_TRACING=jaeger
    command: /opt/kafka/kafka_connect_run.sh
    networks:
     - my-network
  order-db:
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5432:5432
    healthcheck:
      test: "pg_isready -U orderuser -d orderdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=orderuser
     - POSTGRES_PASSWORD=orderpw
     - POSTGRES_DB=orderdb
    volumes:
     - ./init-order.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
     - my-network
  payment-db:
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5433:5432
    healthcheck:
      test: "pg_isready -U paymentuser -d paymentdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=paymentuser
     - POSTGRES_PASSWORD=paymentpw
     - POSTGRES_DB=paymentdb
    volumes:
     - ./init-payment.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
     - my-network
  customer-db:
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5434:5432
    healthcheck:
      test: "pg_isready -U customeruser -d customerdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=customeruser
     - POSTGRES_PASSWORD=customerpw
     - POSTGRES_DB=customerdb
    volumes:
     - ./init-customer.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
     - my-network
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - my-network
  order-service:
    image: debezium-examples/saga-order-service:${DEBEZIUM_VERSION}
    build:
      context: order-service
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
     - 8080:8080
    links:
     - kafka
     - order-db
     - jaeger
    environment:
     - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://order-db:5432/orderdb
     - MP_MESSAGING_INCOMING_PAYMENTRESPONSE_BOOTSTRAP_SERVERS=kafka:9092
     - MP_MESSAGING_INCOMING_CREDITRESPONSE_BOOTSTRAP_SERVERS=kafka:9092
     - JAEGER_SERVICE_NAME=order-service
     - JAEGER_SAMPLER_TYPE=const
     - JAEGER_SAMPLER_PARAM=1
     - JAEGER_AGENT_HOST=jaeger
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - my-network
  payment-service:
    image: debezium-examples/saga-payment-service:${DEBEZIUM_VERSION}
    build:
      context: payment-service
      dockerfile: src/main/docker/Dockerfile.jvm
    links:
     - kafka
     - payment-db
     - jaeger
    environment:
     - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://payment-db:5432/paymentdb
     - MP_MESSAGING_INCOMING_PAYMENT_BOOTSTRAP_SERVERS=kafka:9092
     - JAEGER_SERVICE_NAME=payment-service
     - JAEGER_SAMPLER_TYPE=const
     - JAEGER_SAMPLER_PARAM=1
     - JAEGER_AGENT_HOST=jaeger
    depends_on:
      payment-db:
        condition: service_healthy
    networks:
      - my-network
  customer-service:
    image: debezium-examples/saga-customer-service:${DEBEZIUM_VERSION}
    build:
      context: customer-service
      dockerfile: src/main/docker/Dockerfile.jvm
    links:
     - kafka
     - customer-db
     - jaeger
    environment:
     - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://customer-db:5432/customerdb
     - MP_MESSAGING_INCOMING_CREDIT_BOOTSTRAP_SERVERS=kafka:9092
     - JAEGER_SERVICE_NAME=customer-service
     - JAEGER_SAMPLER_TYPE=const
     - JAEGER_SAMPLER_PARAM=1
     - JAEGER_AGENT_HOST=jaeger
    depends_on:
      customer-db:
        condition: service_healthy
    networks:
      - my-network
networks:
  my-network:
    name: saga-network
