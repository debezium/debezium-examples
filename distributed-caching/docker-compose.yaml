version: '2.1'
services:
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    networks:
     - my-network
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
     # Set to host IP address when working on the services locally
     # - ADVERTISED_HOST_NAME=192.168.1.16
    networks:
     - my-network
  order-db:
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5432:5432
    healthcheck:
      test: "pg_isready -U postgresuser -d orderdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=postgresuser
     - POSTGRES_PASSWORD=postgrespw
     - POSTGRES_DB=orderdb
     - PGPASSWORD=postgrespw
    networks:
     - my-network
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
     - my-network
  connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka
     - order-db
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses 
     - KAFKA_DEBUG=true
     - DEBUG_SUSPEND_FLAG=n
     - JAVA_DEBUG_PORT=0.0.0.0:5005
     - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
     - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
     - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
     - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    networks:
     - my-network
  order-service:
    image: debezium-examples/distributed-caching-order-service:${DEBEZIUM_VERSION}
    build:
      context: order-service
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
    ports:
     - 8080:8080
    links:
     - kafka
     - order-db
    environment:
     - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://order-db:5432/orderdb
    depends_on:
      order-db:
        condition: service_healthy
      connect:
        condition: service_started
  cache-update-service:
    image: debezium-examples/distributed-caching-cache-update-service:${DEBEZIUM_VERSION}
    build:
      context: cache-update-service
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
    links:
     - kafka
    environment:
     - MP_MESSAGING_INCOMING_ORDERS_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      connect:
        condition: service_started
networks:
  my-network:
    name: distributed-caching-network