services:
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
     - 4317:4317
     - 16686:16686
    environment:
     - COLLECTOR_OTLP_ENABLED=true
  
  kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - CLUSTER_ID=oh-sxaDRTcyAr6pFRbXyzA
      - NODE_ID=1
      - NODE_ROLE=combined
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

  order-db:
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
     - 5433:5432
    healthcheck:
      test: "pg_isready -U postgresuser -d orderdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
     - POSTGRES_USER=postgresuser
     - POSTGRES_PASSWORD=postgrespw
     - POSTGRES_DB=orderdb
     - PGPASSWORD=postgrespw

  shipment-db:
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
      - 5434:5432
    healthcheck:
      test: "pg_isready -U postgresuser -d shipmentdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespw
      - POSTGRES_DB=shipmentdb
      - PGPASSWORD=postgrespw

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"

  connect:
    image: debezium/strimzi-connect
    build:
      context: debezium-strimzi
      args:
        DEBEZIUM_CONNECTOR_VERSION: "${DEBEZIUM_CONNECTOR_VERSION:-2.4.0.Alpha2}"
        STRIMZI_VERSION: "${STRIMZI_VERSION:-latest-kafka-3.5.1}"
    ports:
     - 8083:8083
    depends_on:
     - kafka
     - order-db
    environment:
     - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
     - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
     - |
         KAFKA_CONNECT_CONFIGURATION=
         key.converter=org.apache.kafka.connect.json.JsonConverter
         value.converter=org.apache.kafka.connect.json.JsonConverter
         key.converter.schemas.enable=false
         value.converter.schemas.enable=false
         group.id=connect
         offset.storage.topic=connect-offsets
         offset.storage.replication.factor=1
         config.storage.topic=connect-configs
         config.storage.replication.factor=1
         status.storage.topic=connect-status
         status.storage.replication.factor=1
         producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor
     - OTEL_SERVICE_NAME=kafka-connect
     - OTEL_TRACES_EXPORTER=otlp
     - OTEL_METRICS_EXPORTER=none
     - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
     - OTEL_TRACES_SAMPLER=always_on
     - STRIMZI_TRACING=opentelemetry
    command: /opt/kafka/kafka_connect_run.sh

  order-service:
    image: debezium-examples/outbox-order-service:${DEBEZIUM_VERSION}
    build:
      context: order-service
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
    ports:
     - 8080:8080
    links:
     - kafka
     - order-db
     - jaeger
    environment:
     - QUARKUS_DEBEZIUM_OUTBOX_REMOVE_AFTER_INSERT=true
     - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317
    depends_on:
      order-db:
        condition: service_healthy
      connect:
        condition: service_started
      kafka:
        condition: service_started
      jaeger:
        condition: service_started
    command: "./application -Dquarkus.datasource.jdbc.url=jdbc:postgresql://order-db:5432/orderdb?currentSchema=inventory -Dquarkus.datasource.username=postgresuser -Dquarkus.datasource.password=postgrespw"
  
  shipment-service:
    image: debezium-examples/outbox-shipment-service:${DEBEZIUM_VERSION}
    build:
      context: shipment-service
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_BUILD:-jvm}
    links:
     - kafka
     - shipment-db
     - jaeger
    environment:
      - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jaeger:4317
    depends_on:
      shipment-db:
        condition: service_healthy
      connect:
        condition: service_started
      kafka:
        condition: service_started
      jaeger:
        condition: service_started
